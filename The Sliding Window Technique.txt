The Sliding Window Technique
The sliding window technique is a powerful and widely used algorithmic pattern for solving problems that involve finding subarrays or substrings of a specific property within a larger array or string. It significantly reduces the time complexity of brute-force approaches by avoiding redundant computations.

Core Idea:

The technique involves maintaining a "window" (a contiguous subarray or substring) that slides over the input array or string. The size of this window can be fixed or dynamic, depending on the problem requirements. We perform operations within this window to achieve the desired result, and then we "slide" the window forward by one or more positions, repeating the process until the entire input is covered.

Analogy:

Imagine looking at a long scroll of text through a fixed-size rectangular frame. You move the frame (slide the window) along the scroll to read different portions of the text.

Key Components:

Window: A contiguous portion of the input (subarray or substring) defined by a start and end index.
Window Boundaries: Two pointers, typically windowStart (left boundary) and windowEnd (right boundary), define the current window.
Window Movement: The windowEnd pointer usually moves forward to expand the window. The windowStart pointer moves forward (shrinks the window from the left) based on certain conditions defined by the problem.
Processing within the Window: While the window slides, we perform computations or maintain data structures (like sums, counts, hash maps, sets) related to the elements within the current window.
Maintaining the Desired Condition: The movement of the window boundaries is often governed by the need to satisfy a specific condition related to the elements within the window (e.g., window size, sum, presence of certain characters).
When to Use the Sliding Window Technique:

The sliding window technique is particularly useful when:

The problem involves finding a subarray or substring that satisfies a certain condition.
The condition can be evaluated based on a contiguous portion of the input.
A brute-force approach would involve redundant calculations by repeatedly examining overlapping subarrays or substrings.
Use in String Problems:

The sliding window technique is highly effective in solving various string-related problems. Here are some common applications:

Finding the Longest/Shortest Substring with a Specific Property:

Longest substring without repeating characters (as seen in the previous example).
Longest substring with K distinct characters.
Shortest window containing all characters of another string.
Counting Occurrences of Patterns:

Finding all occurrences of an anagram of a pattern in a string.
Checking for Substring Existence with Constraints:

Checking if a string contains a substring with a specific sum of character values.
How it Works in String Problems (General Steps):

Initialize Window: Set windowStart = 0 and windowEnd = 0.
Expand Window: Move windowEnd to the right, one character at a time, expanding the current window.
Maintain Window State: Use a data structure (like a hash map or an array) to keep track of the frequency or presence of characters within the current window.
Check Condition: At each step, check if the current window satisfies the problem's condition.
Shrink Window (Conditionally): If the condition is violated or if the window has reached a certain size, move windowStart to the right to shrink the window from the left. Update the window state accordingly (e.g., decrement character counts in the hash map).
Update Result: If the current window satisfies the condition, update the result (e.g., the maximum length found so far).
Repeat: Continue steps 2-6 until windowEnd reaches the end of the string.
Example: Finding the Longest Substring Without Repeating Characters (Recap)

Window: A substring defined by windowStart and windowEnd.
Condition: No repeating characters within the window.
Window State: A hash map charIndexMap stores the last seen index of each character.
Expansion: windowEnd moves forward, adding characters to the window.
Shrinking: If a repeating character is encountered within the current window, windowStart is moved to the position after the previous occurrence of that character.
Result: maxLength is updated with the maximum window size encountered while maintaining the no-repeating-characters condition.
Benefits of the Sliding Window Technique:

Reduced Time Complexity: Often reduces the time complexity from O(n^2) or higher (in brute-force approaches) to O(n) because each element is processed at most twice (once when windowEnd reaches it and potentially once when windowStart moves past it).
Efficient Use of Resources: Avoids redundant calculations by reusing information from the previous window.
Intuitive Approach: For many problems involving contiguous subarrays or substrings, the concept of a sliding window is quite natural to visualize and implement.
In summary, the sliding window technique is a valuable tool for efficiently solving a wide range of array and string problems by strategically maintaining and moving a window over the input, performing necessary operations within the window, and updating the result based on the defined conditions. Its application in string problems is particularly common and effective for tasks involving substring analysis.