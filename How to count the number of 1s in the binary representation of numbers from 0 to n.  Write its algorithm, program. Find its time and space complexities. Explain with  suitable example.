#include <iostream>
#include <vector>

class Solution {
public:
    int countSetBits(int n) {
        if (n < 0) {
            return 0; // Or handle error as needed
        }
        std::vector<int> dp(n + 1, 0);

        for (int i = 1; i <= n; ++i) {
            if ((i & (i - 1)) == 0) { // i is a power of 2
                dp[i] = dp[i - 1] + 1;
            } else {
                int power_of_2 = 1;
                while (power_of_2 * 2 <= i) {
                    power_of_2 *= 2;
                }
                dp[i] = dp[power_of_2 - 1] + (i - power_of_2 + 1) + dp[i - power_of_2];
            }
        }
        return dp[n];
    }
};

int main() {
    Solution sol;
    std::cout << "n = 0: " << sol.countSetBits(0) << std::endl;   // Output: 0
    std::cout << "n = 1: " << sol.countSetBits(1) << std::endl;   // Output: 1
    std::cout << "n = 2: " << sol.countSetBits(2) << std::endl;   // Output: 3 (0:0, 1:1, 2:10)
    std::cout << "n = 3: " << sol.countSetBits(3) << std::endl;   // Output: 6 (0:0, 1:1, 2:10, 3:11)
    std::cout << "n = 4: " << sol.countSetBits(4) << std::endl;   // Output: 10
    std::cout << "n = 5: " << sol.countSetBits(5) << std::endl;   // Output: 12
    std::cout << "n = 13: " << sol.countSetBits(13) << std::endl; // Output: 31
    return 0;
}
