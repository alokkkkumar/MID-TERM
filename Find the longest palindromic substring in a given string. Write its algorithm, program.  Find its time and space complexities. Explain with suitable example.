#include <iostream>
#include <string>
#include <algorithm>

using namespace std;

string longestPalindrome(string s) {
    int n = s.length();
    if (n < 2) {
        return s;
    }

    int start = 0;
    int maxLength = 1;

    auto expandAroundCenter = [&](int left, int right) {
        while (left >= 0 && right < n && s[left] == s[right]) {
            if (right - left + 1 > maxLength) {
                maxLength = right - left + 1;
                start = left;
            }
            left--;
            right++;
        }
    };

    for (int i = 0; i < n; ++i) {
        // Odd length palindromes
        expandAroundCenter(i, i);

        // Even length palindromes
        expandAroundCenter(i, i + 1);
    }

    return s.substr(start, maxLength);
}

int main() {
    string s1 = "babad";
    cout << "Longest palindrome in \"" << s1 << "\": " << longestPalindrome(s1) << endl; // Output: "bab" or "aba"

    string s2 = "cbbd";
    cout << "Longest palindrome in \"" << s2 << "\": " << longestPalindrome(s2) << endl; // Output: "bb"

    string s3 = "a";
    cout << "Longest palindrome in \"" << s3 << "\": " << longestPalindrome(s3) << endl; // Output: "a"

    string s4 = "ac";
    cout << "Longest palindrome in \"" << s4 << "\": " << longestPalindrome(s4) << endl; // Output: "a" or "c"

    string s5 = "racecar";
    cout << "Longest palindrome in \"" << s5 << "\": " << longestPalindrome(s5) << endl; // Output: "racecar"

    string s6 = "bananas";
    cout << "Longest palindrome in \"" << s6 << "\": " << longestPalindrome(s6) << endl; // Output: "anana"

    return 0;
}
