#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int countElements(const vector<vector<int>>& matrix, int mid) {
    int n = matrix.size();
    int m = matrix[0].size();
    int count = 0;
    int j = m - 1;

    for (int i = 0; i < n; ++i) {
        while (j >= 0 && matrix[i][j] > mid) {
            j--;
        }
        count += (j + 1);
    }
    return count;
}

int kthSmallest(vector<vector<int>>& matrix, int k) {
    int n = matrix.size();
    int m = matrix[0].size();
    int low = matrix[0][0];
    int high = matrix[n - 1][m - 1];
    int ans = -1;

    while (low <= high) {
        int mid = low + (high - low) / 2;
        int count = countElements(matrix, mid);

        if (count >= k) {
            ans = mid;
            high = mid - 1;
        } else {
            low = mid + 1;
        }
    }
    return ans;
}

int main() {
    vector<vector<int>> matrix1 = {{1, 5, 9}, {10, 11, 13}, {12, 13, 15}};
    int k1 = 8;
    cout << "The " << k1 << "-th smallest element is: " << kthSmallest(matrix1, k1) << endl; // Output: 13

    vector<vector<int>> matrix2 = {{-5, -3, 2}, {2, 4, 7}, {4, 6, 8}};
    int k2 = 5;
    cout << "The " << k2 << "-th smallest element is: " << kthSmallest(matrix2, k2) << endl; // Output: 4

    vector<vector<int>> matrix3 = {{1, 2}, {1, 3}};
    int k3 = 2;
    cout << "The " << k3 << "-th smallest element is: " << kthSmallest(matrix3, k3) << endl; // Output: 1

    return 0;
}
