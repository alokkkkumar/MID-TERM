#include <iostream>
#include<vector>

// Definition for singly-linked list.
struct ListNode {
    int val;
    ListNode *next;
    ListNode() : val(0), next(nullptr) {}
    ListNode(int x) : val(x), next(nullptr) {}
    ListNode(int x, ListNode *next) : val(x), next(next) {}
};

ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
    if (!list1) return list2;
    if (!list2) return list1;

    ListNode* dummy = new ListNode(0);
    ListNode* current = dummy;

    while (list1 && list2) {
        if (list1->val <= list2->val) {
            current->next = list1;
            list1 = list1->next;
        } else {
            current->next = list2;
            list2 = list2->next;
        }
        current = current->next;
    }

    if (list1) {
        current->next = list1;
    } else if (list2) {
        current->next = list2;
    }

    return dummy->next;
}

// Helper function to print a linked list
void printList(ListNode* head) {
    ListNode* temp = head;
    while (temp) {
        std::cout << temp->val << " -> ";
        temp = temp->next;
    }
    std::cout << "NULL" << std::endl;
}

// Helper function to create a linked list from a vector
ListNode* createList(const std::vector<int>& values) {
    if (values.empty()) return nullptr;
    ListNode* head = new ListNode(values[0]);
    ListNode* current = head;
    for (size_t i = 1; i < values.size(); ++i) {
        current->next = new ListNode(values[i]);
        current = current->next;
    }
    return head;
}

int main() {
    std::vector<int> vals1 = {1, 2, 4};
    ListNode* list1 = createList(vals1);
    std::cout << "List 1: ";
    printList(list1);

    std::vector<int> vals2 = {1, 3, 4};
    ListNode* list2 = createList(vals2);
    std::cout << "List 2: ";
    printList(list2);

    ListNode* mergedList = mergeTwoLists(list1, list2);
    std::cout << "Merged List: ";
    printList(mergedList);

    std::vector<int> vals3 = {};
    ListNode* list3 = createList(vals3);
    std::cout << "List 3: ";
    printList(list3);

    std::vector<int> vals4 = {0};
    ListNode* list4 = createList(vals4);
    std::cout << "List 4: ";
    printList(list4);

    ListNode* mergedList2 = mergeTwoLists(list3, list4);
    std::cout << "Merged List 2: ";
    printList(mergedList2);

    return 0;
}
